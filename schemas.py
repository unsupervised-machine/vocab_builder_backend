from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime

class UserBase(BaseModel):
    # id: int -- DONT NEED AUTO GENERATED by SQLALCHEMY
    name: str
    email: str

    class Config:
        orm_mode = True  # This tells Pydantic to treat SQLAlchemy models as dictionaries


class WordBase(BaseModel):
    # id: int -- DONT NEED AUTO GENERATED by SQLALCHEMY
    word: str
    definition: str
    example: Optional[str] = None  # Example is optional
    category: Optional[str] = None  # Category is optional
    difficulty: Optional[str] = "medium"  # Default difficulty to "medium"

    class Config:
        orm_mode = True


class UserWordProgressBase(BaseModel):
    id: int
    user_id: int
    word_id: int
    status: str  # not started, active, waiting, learned
    review_count: int
    review_spacing: int  # Duration until moving from waiting to active
    review_last_date: Optional[int]  # The last review date (could use int for UNIX timestamp or datetime)

    class Config:
        orm_mode = True


# Create schemas for POST requests (for creating new entries)


class UserCreate(UserBase):
    password: str  # Include password field for user creation


class WordCreate(WordBase):
    pass  # can add more fields later


class UserWordProgressCreate(UserWordProgressBase):
    pass  # can add more fields later



# Read schemas for GET responses

class User(UserBase):
    word_progresses: List[UserWordProgressBase] = []  # Include the user's progress

    class Config:
        orm_mode = True


class Word(WordBase):
    user_progresses: List[UserWordProgressBase] = []  # Include the users' progress on this word

    class Config:
        orm_mode = True


class UserWordProgress(UserWordProgressBase):
    user: UserBase  # Include user details in the progress response
    word: WordBase  # Include word details in the progress response

    class Config:
        orm_mode = True